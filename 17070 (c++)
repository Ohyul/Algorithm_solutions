#include <iostream>
#include <vector>

using namespace std;

const int MAX_N = 16;

int N;
vector<vector<int>> room(MAX_N, vector<int>(MAX_N, 0));
vector<vector<vector<int>>> dp(3, vector<vector<int>>(MAX_N,
                                                      vector<int>(MAX_N, 0)));

void solution() {
  // preset
  dp[0][0][1] = 1;
  for (int i = 2; i < N; ++i) {
    if (room[0][i] == 0) {
      dp[0][0][i] = dp[0][0][i - 1];
    }
  }
  // Diagnoal placement
  for (int r = 1; r < N; ++r) {
    for (int c = 1; c < N; ++c) {
      if (room[r][c] == 0 && room[r][c - 1] == 0 && room[r - 1][c] == 0) {
        dp[1][r][c] =
            dp[0][r - 1][c - 1] + dp[1][r - 1][c - 1] + dp[2][r - 1][c - 1];
      }

      // Horizontal and vertical placement
      if (room[r][c] == 0) {
        dp[0][r][c] = dp[0][r][c - 1] + dp[1][r][c - 1];
        dp[2][r][c] = dp[2][r - 1][c] + dp[1][r - 1][c];
      }
    }
  }

  // print answer
  int result = 0;
  for (int i = 0; i < 3; ++i) {
    result += dp[i][N - 1][N - 1];
  }
  cout << result << endl;
}

int main() {
  cin >> N;
  for (int i = 0; i < N; ++i) {
    for (int j = 0; j < N; ++j) {
      cin >> room[i][j];
    }
  }

  solution();

  return 0;
}
